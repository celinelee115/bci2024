{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sQb8UNexzK6U"
      },
      "source": [
        "# BE 521 Final Project\n",
        "University of Pennsylvania BE 521 Brain-Computer Interface, Spring 2024\n",
        "\n",
        "Team: Van Leeuwen\n",
        "\n",
        "Members: Celine Lee, Sabrina Weng\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zUZMM3sHzR_P"
      },
      "source": [
        "# Project Overview\n",
        "\n",
        "This final project aimed to predict finger flexion using intracranial EEG (ECoG) in three human subjects. The data and problem framing come from the 4th BCI Competition (Miller et al. 2008). This project proposed using ensemble modeling of XGBoost and AdaBoost for regression to train the preprocessed ECoG signal. The final correlation score achieved 0.4717 on the leaderboard. The detail of the code is as below.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CLzcML-x6jnB"
      },
      "source": [
        "# 1. Getting Started"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8w4AGrXqUt5Q"
      },
      "outputs": [],
      "source": [
        "# Import necessary packages\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from tqdm import tqdm\n",
        "import pickle\n",
        "\n",
        "from scipy.stats import pearsonr\n",
        "from scipy import signal as sig\n",
        "from scipy.io import loadmat\n",
        "from scipy.interpolate import CubicSpline\n",
        "from scipy.fft import fft, fftfreq\n",
        "from scipy.signal import butter, filtfilt, sosfiltfilt\n",
        "from scipy.io import savemat\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import AdaBoostRegressor\n",
        "import xgboost as xgb"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GA2hB_8a_Lu3"
      },
      "source": [
        "## Data Analysis\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Data Description**\n",
        "\n",
        "The file 'raw_training_data.mat' consists of 2 datasets, train_ecog and train_dg.\n",
        "\n",
        "- The np.ndarray shapes for 'train_ecog' are (m x 62), (m x 48), and (m x 64), where m is the number of samples in the signal, and each subject had 62, 46, and 64 ecog channels, respectively.\n",
        "\n",
        "- All np.ndarray shapes for 'train_dg' should be (m x 5), where m is the number of samples in the signal, and 5 is the number of fingers.\n",
        "\n",
        "- In this dataset, there are 300000 samples of training datasets. (m = 300000)\n",
        "\n",
        "- The sampling rate in this case is set to 1000 Hz.\n",
        "\n",
        "The file 'leaderboard_data.mat' is the testing ecog dataset, including 1 dataset 'leaderboard_ecog' and we define as test_ecog.\n",
        "- The np.ndarray shapes for 'test_ecog' are (m x 62), (m x 48), and (m x 64), where m is the number of samples in the signal, and each subject had 62, 46, and 64 ecog channels, respectively.\n",
        "- In this testing dataset, there are 147500 samples. (m = 147500)"
      ],
      "metadata": {
        "id": "W36lj029DuZr"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XFZ8IKUo8qax"
      },
      "outputs": [],
      "source": [
        "# Load training and leader board data\n",
        "train_data = loadmat('raw_training_data.mat')\n",
        "leaderboard = loadmat('leaderboard_data.mat')\n",
        "\n",
        "ecog = train_data['train_ecog'] # (3, 1)\n",
        "dg = train_data['train_dg'] # (3, 1)\n",
        "\n",
        "leaderboard_ecog = leaderboard['leaderboard_ecog'] # (3, 1)\n",
        "\n",
        "# Clean up data\n",
        "train_ecog = [ecog[i][0] for i in range(len(ecog))] # (3)(300000, x)\n",
        "train_dg = [dg[i][0] for i in range(len(ecog))] # (3)(300000, 5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bkDfDq3Q18cP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "27d26ada-fefb-47d8-edc4-10302bf9af22"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Spliting 300000 datset into 225000 training sets, and 75000 validation sets.\n"
          ]
        }
      ],
      "source": [
        "# Split into train set and validation set\n",
        "train_dg, val_dg, train_ecog, val_ecog = [], [], [], []\n",
        "\n",
        "for i in range(len(ecog)):\n",
        "  g_train, g_val, e_train, e_val = train_test_split(dg[i][0], ecog[i][0], test_size=0.25, random_state=42, shuffle = False)\n",
        "  train_dg.append(g_train)\n",
        "  val_dg.append(g_val)\n",
        "  train_ecog.append(e_train)\n",
        "  val_ecog.append(e_val)\n",
        "\n",
        "print(f'Spliting {len(ecog[0][0])} datset into {len(g_train)} training sets, and {len(g_val)} validation sets.')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v1ZfISDvuuzI"
      },
      "source": [
        "# 2. Data Preprocessing\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mQ9Nl70hkHBa"
      },
      "source": [
        "## Filter function\n",
        "Implement the `filter_data` function to clean underlying data. We used a bandpass filter with a low cutoff frequency of 0.15 Hz and a high cutoff frequency of 200 Hz. The sampling is set to 1000 Hz in this dataset and the order is set to 4."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def filter_data(data, pass_band=(0.15, 200), fs=1000, order=4):\n",
        "    \"\"\"\n",
        "    Input:\n",
        "      data (samples x channels): the raw (noisy) signal\n",
        "      fs: the sampling rate (1000 for this dataset)\n",
        "    Output:\n",
        "      clean_data (samples x channels): the filtered signal\n",
        "    \"\"\"\n",
        "    sos = sig.butter(order, Wn=pass_band, btype=\"bandpass\", fs=fs, output=\"sos\")\n",
        "    if len(data.shape) > 1:\n",
        "        clean_data = np.array([sig.sosfiltfilt(sos, eeg) for eeg in data.T]).T\n",
        "    else:\n",
        "        clean_data = sig.sosfiltfilt(sos, data)\n",
        "\n",
        "    # assert clean_data.shape == data.shape\n",
        "    return clean_data"
      ],
      "metadata": {
        "id": "T-8-wOvbAm3Z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qL3CMDPovL3l"
      },
      "source": [
        "## Number of Windows Calculation Function\n",
        "Calculate the number of windows `m`. In this case, we set the window length of 100ms and 50ms window overlap/window displacement."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gc5y0fcb__N3",
        "outputId": "81201308-0bbd-4012-8ac6-b2497a351abe"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There will be 4499.0 feature windows.\n"
          ]
        }
      ],
      "source": [
        "# Define parameters\n",
        "fs = 1000 # (Hz)\n",
        "winLen = 100e-3 # (s)\n",
        "winDisp = 50e-3 # (s)\n",
        "length = winLen * fs\n",
        "displacement = winDisp * fs\n",
        "\n",
        "# Define the function for calculating number of window\n",
        "def NumWins(x, fs, length, displacement):\n",
        "    return (len(x) - length)/displacement  + 1\n",
        "\n",
        "# Calculate number of windows\n",
        "M = NumWins(train_ecog[0], fs, length, displacement)\n",
        "print('There will be',M,'feature windows.')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iBBgRW2WwMFN"
      },
      "source": [
        "## Get features function\n",
        "\n",
        "Implement the `get_features` function to calculate features for a given filtered window from the ECoG signal for better training. We utilized various methods and extracted 9 different features, including:\n",
        "1. Average time-domain voltage\n",
        "2. Hjorth Activity\n",
        "3. Hjorth Mobility\n",
        "4. Hjorth Complexity\n",
        "5. Power spectrum with bandwidth range 12-30 Hz (Alpha)\n",
        "6. Power spectrum with bandwidth range 30-70 Hz (Beta)\n",
        "7. Power spectrum with bandwidth range 70-150 Hz (Gamma)\n",
        "8. Zero Crossings\n",
        "9. Absolute Sum of Differences\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_features = 9\n",
        "\n",
        "def fn_zero_crossings(x):\n",
        "        x_cent = x - np.mean(x, axis=0)\n",
        "        x_shift = np.hstack([x_cent[:, 1:], x_cent[:, -1].reshape((-1, 1))])\n",
        "        x_cross = (x_cent * x_shift) < 0\n",
        "        return np.sum(x_cross, axis=0)\n",
        "\n",
        "# Update the function definition\n",
        "def get_features(filtered_window, fs=1000):\n",
        "    \"\"\"\n",
        "    Input:\n",
        "        filtered_window (window_samples x channels): the window of the filtered ecog signal\n",
        "        fs: sampling rate\n",
        "    Output:\n",
        "        features (channels x num_features): the features calculated on each channel for the window\n",
        "    \"\"\"\n",
        "    features = np.zeros((len(filtered_window[0]), num_features))\n",
        "\n",
        "    # Feature 1: Average time-domain voltage\n",
        "    features[:,0] = np.mean(filtered_window, axis=0)\n",
        "\n",
        "    # Feature 2-4: Hjorth parameters\n",
        "    # Hjorth Activity\n",
        "    features[:,1] = np.var(filtered_window, axis=0)\n",
        "    # Hjorth Mobility\n",
        "    first_derivative  = np.diff(filtered_window, axis=0)\n",
        "    features[:,2] = np.sqrt(np.var(first_derivative, axis=0) / np.var(filtered_window, axis=0))\n",
        "    # Hjorth Complexity\n",
        "    features[:,3] = np.sqrt(np.var(np.diff(first_derivative, axis=0)) / np.var(first_derivative, axis=0))\n",
        "\n",
        "\n",
        "    # Feature 5-7: Power spectrum with different bandwidth range\n",
        "    freqs, psd = sig.welch(filtered_window, fs=fs, axis=0, nperseg = 100)\n",
        "    # Alpha (12-30 Hz)\n",
        "    features[:,4] = np.mean(psd[(freqs >= 12) & (freqs <= 30)], axis=0)\n",
        "    # Beta (30-70 Hz)\n",
        "    features[:,5] = np.mean(psd[(freqs >= 30) & (freqs <= 70)], axis=0)\n",
        "    # Gamma (70-150 Hz)\n",
        "    features[:,6] = np.mean(psd[(freqs >= 70) & (freqs <= 150)], axis=0)\n",
        "\n",
        "    # Feature 8: Zero Crossings\n",
        "    features[:,7] = fn_zero_crossings(filtered_window)\n",
        "\n",
        "    # Feature 9: Absolute Sum of Differences\n",
        "    features[:,8] = np.sum(np.absolute(np.diff(filtered_window, axis=0)), axis=0)\n",
        "\n",
        "    return features"
      ],
      "metadata": {
        "id": "_4o0f8g3Av8l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vPbDhVki7MnS"
      },
      "source": [
        "## Get window feature function\n",
        "Implement the `get_windowed_feats` function to processes data through the steps of filtering (`filter_data`) and feature calculation (`get_features`) to return a feature vector for each time window."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "STXDXJz27qZA"
      },
      "outputs": [],
      "source": [
        "def get_windowed_feats(raw_ecog, fs, window_length, window_overlap):\n",
        "    \"\"\"\n",
        "    Inputs:\n",
        "        raw_eeg (samples x channels): the raw signal\n",
        "        fs: the sampling rate (1000 for this dataset)\n",
        "        window_length: the window's length\n",
        "        window_overlap: the window's overlap\n",
        "    Output:\n",
        "        all_feats (num_windows x (channels x features)): the features for each channel for each time window\n",
        "        note that this is a 2D array.\n",
        "    \"\"\"\n",
        "    # Filter the raw ecog signal\n",
        "    filtered_ecog = filter_data(raw_ecog, fs=fs)\n",
        "\n",
        "    # Calculate number of windows\n",
        "    M = NumWins(filtered_ecog, fs, window_length, window_overlap)\n",
        "\n",
        "    # Initialize output array\n",
        "    num_channels = len(filtered_ecog[0])\n",
        "    num_feature = num_features\n",
        "    all_feats = np.zeros((int(M), num_channels * num_feature))\n",
        "\n",
        "    for n in range(int(M)):\n",
        "        start = int(n * window_overlap)\n",
        "        end = start + int(window_length)\n",
        "        filtered_window = filtered_ecog[start:end]\n",
        "\n",
        "        # Calculate and store features of each window\n",
        "        all_feats[n, :] = get_features(filtered_window).flatten()\n",
        "\n",
        "    return all_feats"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yV7LdjekftDs"
      },
      "source": [
        "## Create R matrix function\n",
        "Implement the `create_R_matrix` function to calculate the R matrix. Also include appending a copy of the first N-1 rows of your feature matrix to the beginning of the feature matrix."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6jfeX1ZLorZe"
      },
      "outputs": [],
      "source": [
        "def create_R_matrix(features, N_wind):\n",
        "  \"\"\"\n",
        "  Input:\n",
        "    features (samples (number of windows in the signal) x channels x features):\n",
        "      the features you calculated using get_windowed_feats\n",
        "    N_wind: number of windows to use in the R matrix\n",
        "\n",
        "  Output:\n",
        "    R (samples x (N_wind*channels*features))\n",
        "  \"\"\"\n",
        "  # Append first N-1 to the beginning of feature array\n",
        "  features_adjusted = np.concatenate([features[:2,:], features], axis=0)\n",
        "\n",
        "  # Initialization of response matrix\n",
        "  num_rows = len(features)\n",
        "  num_cols = len(features[0]) * N_wind + 1\n",
        "  num_features = 9\n",
        "  num_channels = int(len(features[0])/num_features)\n",
        "  R = np.zeros((num_rows, num_cols))\n",
        "\n",
        "  for i in range(num_rows):\n",
        "    # Append one to the beginning of each row\n",
        "    R[i,0] = 1\n",
        "\n",
        "    for j in range(num_channels):\n",
        "      start_col = j * num_features * N_wind + 1\n",
        "      end_col = start_col + num_features * N_wind\n",
        "\n",
        "      start_index = j * num_features\n",
        "      end_index = start_index + num_features\n",
        "\n",
        "      R[i, start_col:end_col] = features_adjusted[i:i+N_wind, start_index:end_index].flatten()\n",
        "\n",
        "  return R"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4BRc82EMdfux"
      },
      "source": [
        "# 3. ML Training and Validation Evaluation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cOctyj3wbHEv"
      },
      "source": [
        "## Training and Validation Dataset Feature Preparation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eLJblU_JbJtq"
      },
      "outputs": [],
      "source": [
        "# Create feature matrix for the training dataset\n",
        "train1_features = get_windowed_feats(train_ecog[0], fs, length, displacement)\n",
        "train2_features = get_windowed_feats(train_ecog[1], fs, length, displacement)\n",
        "train3_features = get_windowed_feats(train_ecog[2], fs, length, displacement)\n",
        "\n",
        "all_train_features = [train1_features, train2_features, train3_features]\n",
        "\n",
        "# Create feature matrix for the validation dataset\n",
        "val1_features = get_windowed_feats(val_ecog[0], fs, length, displacement)\n",
        "val2_features = get_windowed_feats(val_ecog[1], fs, length, displacement)\n",
        "val3_features = get_windowed_feats(val_ecog[2], fs, length, displacement)\n",
        "\n",
        "all_val_features = [val1_features, val2_features, val3_features]\n",
        "\n",
        "# Downsampling of data glove\n",
        "all_glove = []\n",
        "for i, data in enumerate(train_dg):\n",
        "  factor = int(len(data)/all_train_features[0].shape[0])\n",
        "  all_glove.append(data[::factor][:all_train_features[0].shape[0]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ry_4HBVNd2Az"
      },
      "outputs": [],
      "source": [
        "# Define function for interpolate predictions\n",
        "def cubic_interp(predictions, desired_length):\n",
        "    interpolated = []\n",
        "\n",
        "    for filter in predictions:\n",
        "        original_time = np.arange(0, len(filter)) * winDisp\n",
        "\n",
        "        # Create a cubic spline interpolation object\n",
        "        cubic_spline = CubicSpline(original_time, filter)\n",
        "\n",
        "        new_time = np.linspace(0, original_time[-1], desired_length)\n",
        "\n",
        "        # Interpolate the filter coefficients at the new time points\n",
        "        interpolated.append(cubic_spline(new_time))\n",
        "\n",
        "    return interpolated"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create R matrix for training features\n",
        "R1_train = create_R_matrix(train1_features, 3)\n",
        "R2_train = create_R_matrix(train2_features, 3)\n",
        "R3_train = create_R_matrix(train3_features, 3)\n",
        "R_train = [R1_train, R2_train, R3_train]\n",
        "\n",
        "# Create R matrix for validation features\n",
        "R1_val = create_R_matrix(val1_features, 3)\n",
        "R2_val = create_R_matrix(val2_features, 3)\n",
        "R3_val = create_R_matrix(val3_features, 3)\n",
        "R_val = [R1_val, R2_val, R3_val]\n",
        "\n",
        "print(f'Including {len(R_train[0])} training features, and {len(R_val[0])} validation features.')"
      ],
      "metadata": {
        "id": "jGeAfa8AwN8r",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5ef3f0d0-1baf-45aa-8aff-b264559d03e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Including 4499 training features, and 1499 validation features.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Proposed Training Model: Ensemble Modeling of XGBoost and AdaBoost Regressor"
      ],
      "metadata": {
        "id": "krm6hyfm0v1R"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train the XGBoost model and AdaBoost Regressor using the calculated R matrix of 4,499 training features, respectively, instead of training the total of 225,000 training sets."
      ],
      "metadata": {
        "id": "PehTKwCcQJm4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialization\n",
        "all_xgb_model = []\n",
        "all_ada_model = []\n",
        "\n",
        "# Train the XGBoost model and AdaBoost Regressor\n",
        "for glove, train_feature in zip(all_glove, R_train):\n",
        "\n",
        "    xgb_model_subj = []\n",
        "    ada_model_subj = []\n",
        "\n",
        "    for i in tqdm(range(len(train_dg[0][0]))):\n",
        "        y_glove = glove[:,i].flatten()\n",
        "\n",
        "        # Initialize and train on the data\n",
        "        xgb_model = xgb.XGBRegressor()\n",
        "        ada_model = AdaBoostRegressor(n_estimators = 100)\n",
        "\n",
        "        # Train the model\n",
        "        xgb_model.fit(train_feature, y_glove)\n",
        "        ada_model.fit(train_feature, y_glove)\n",
        "\n",
        "        # Append the model\n",
        "        xgb_model_subj.append(xgb_model)\n",
        "        ada_model_subj.append(ada_model)\n",
        "\n",
        "    # Append the model\n",
        "    all_xgb_model.append(xgb_model_subj)\n",
        "    all_ada_model.append(ada_model_subj)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RSSJEw1FXdxw",
        "outputId": "16092e87-a4df-4b88-ef92-2a59a7be4ea8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 5/5 [20:08<00:00, 241.66s/it]\n",
            "100%|██████████| 5/5 [15:28<00:00, 185.66s/it]\n",
            "100%|██████████| 5/5 [21:28<00:00, 257.75s/it]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Test the XGBoost model and AdaBoost Regressor using the calculated R matrix of a total of 1,499 validation features, respectively.\n",
        "Then, ensemble the two models by calculating the mean of the validation result. Lastly, interpolate the result to expand back to the full 75,000 validation sets."
      ],
      "metadata": {
        "id": "2qCsYBYmQjSk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Y_val = []\n",
        "\n",
        "# test the validation set and ensemble the models\n",
        "for i, features in tqdm(enumerate(R_val)):\n",
        "    Y_temp = []\n",
        "    # Using trained model\n",
        "    for finger in range(len(all_xgb_model[0])):\n",
        "\n",
        "        # Ensemble\n",
        "        xgb_pred = all_xgb_model[i][finger].predict(features)\n",
        "        ada_pred = all_ada_model[i][finger].predict(features)\n",
        "        Y_temp.append(np.mean([xgb_pred, ada_pred], axis=0))\n",
        "\n",
        "    # Store the predicted value in 3x5\n",
        "    Y_val.append(np.array(Y_temp).T)\n",
        "\n",
        "# Interpolate\n",
        "interpolated_Y = cubic_interp(Y_val, len(val_ecog[0]))"
      ],
      "metadata": {
        "id": "3IQR5DRv4y9-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "01068c0e-7ee5-4445-c1e5-2e01cf0576b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "3it [00:11,  3.75s/it]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Save the models with Pickle"
      ],
      "metadata": {
        "id": "KVB2kVN1k2BG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "\n",
        "pickle.dump(all_xgb_model, open('xgb_model.pkl', 'wb'))\n",
        "pickle.dump(all_xgb_model, open('ada_model.pkl', 'wb'))"
      ],
      "metadata": {
        "id": "L5M2wRVDkYYe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Post-processing\n",
        "\n",
        "This section performs post-processing on the predicted data. We first plot the true target data along with the interpolated data that was not post-processed. We can see that there are lots of noise in the predicted interpolated data, therefore, we want to employ some post-processing techniques on the predicted data."
      ],
      "metadata": {
        "id": "wDRrF4RxVWQY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot to see predicted and true finger difference\n",
        "fs = 1000 # (Hz)\n",
        "t = np.arange(0,len(val_dg[0]),1/fs)\n",
        "plt.figure(figsize=(8,6))\n",
        "plt.plot(val_dg[0][:,0], label='True')\n",
        "plt.plot(interpolated_Y[0][:,0], label='Predicted')\n",
        "plt.title('True and Predicted Angles for First Subject First Finger')\n",
        "plt.xlabel('Datapoint')\n",
        "plt.ylabel('Glove Data')\n",
        "plt.legend();"
      ],
      "metadata": {
        "id": "VU0lsiOxVVc_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "outputId": "f61a65c3-7fc8-4396-d15d-ac63731da9ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here we formulate a weighted moving average function that takes in the input data and weights, and it applies the moving average filter through convolution, and the function returns a smoothed data. The input data being passed to this function will be the predicted glove data."
      ],
      "metadata": {
        "id": "1qryLfC8jMA-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Weighted moving average function\n",
        "def moving_average(data, weights = [0.2, 0.3, 0.5]):\n",
        "    \"\"\"\n",
        "    Apply a moving average filter to the input data.\n",
        "\n",
        "    Parameters:\n",
        "    - data: Input data (1D array-like)\n",
        "    - weights: Different weights to be applied\n",
        "\n",
        "    Returns:\n",
        "    - smoothed_data: Data after applying the moving average filter (1D array)\n",
        "    \"\"\"\n",
        "    # Pad the data at both ends to handle edge cases\n",
        "    padded_data = np.pad(data, (len(weights) // 2, len(weights) // 2), mode='edge')\n",
        "\n",
        "    # Apply the weighted moving average filter\n",
        "    smoothed_data = np.convolve(padded_data, weights[::-1], mode='valid')\n",
        "\n",
        "    return smoothed_data"
      ],
      "metadata": {
        "id": "bZovA-85VpLb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now we defined our weighted moving average function, we can implement it along with the prediction. The following section uses the trained XGBoost and AdaBoost models to predict on the R matrix of validation set. Then, the predicted glove data is passed through the weighted moving average function for post-processing. The post-processed predictions are then interpolated to match the shape of true glove data. The plot below demonstrates the true glove data along with post-processed interpolated predictions of glove data."
      ],
      "metadata": {
        "id": "e6hXcJJxj1RD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Post-processing\n",
        "Y_test, Y_post = [], []\n",
        "\n",
        "for i, features in tqdm(enumerate(R_val)):\n",
        "    Y_temp, Y_moving = [], []\n",
        "    for finger in range(len(all_ada_model[0])):\n",
        "        # Predict using the model\n",
        "        xgb_pred = all_xgb_model[i][finger].predict(features)\n",
        "        ada_pred = all_ada_model[i][finger].predict(features)\n",
        "        Y_temp.append(np.mean([xgb_pred, ada_pred], axis=0))\n",
        "\n",
        "        # Apply moving average\n",
        "        Y_moving.append(moving_average(Y_temp[-1]))\n",
        "\n",
        "    # Store the predicted value and post processing in 3x5\n",
        "    Y_test.append(np.array(Y_temp).T)\n",
        "    Y_post.append(np.array(Y_moving).T)\n",
        "\n",
        "# Interpolate\n",
        "interpolated_Y = cubic_interp(Y_post,len(val_ecog[0]))\n",
        "\n",
        "# Plot post-processing\n",
        "fs = 1000 # (Hz)\n",
        "t = np.arange(0,len(val_dg[0]),1/fs)\n",
        "plt.figure(figsize=(8,6))\n",
        "plt.plot(val_dg[0][:,0], label='True')\n",
        "plt.plot(interpolated_Y[0][:,0], label='Post Processed')\n",
        "plt.title('True and Predicted Angles for First Subject First Finger')\n",
        "plt.xlabel('Datapoint')\n",
        "plt.ylabel('Glove Data')\n",
        "plt.legend();"
      ],
      "metadata": {
        "id": "pAyEzO8JVsT2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "outputId": "cebc014c-6471-48b0-dd35-7ea676a0c9da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "3it [00:06,  2.31s/it]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iDqxnI-zvVN1"
      },
      "source": [
        "## Validation Evaluation\n",
        "Calculate the Pearson Coefficients of the Validation set for the five fingers in each of the 3 subjects, and calculate the mean Pearson Coefficients for the full validation set."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SUXh9vxOY-Zz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "73a599ab-bd83-4f85-d3eb-7c854fd7d329"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pearson correlation for subject 1 finger 1 using Ensemble model is 0.27977834184369565\n",
            "Pearson correlation for subject 1 finger 2 using Ensemble model is 0.3417557160425444\n",
            "Pearson correlation for subject 1 finger 3 using Ensemble model is 0.051095472868795\n",
            "Pearson correlation for subject 1 finger 4 using Ensemble model is 0.2793157918182122\n",
            "Pearson correlation for subject 1 finger 5 using Ensemble model is 0.05673356986911483\n",
            "Pearson correlation for subject 2 finger 1 using Ensemble model is 0.2616230865061363\n",
            "Pearson correlation for subject 2 finger 2 using Ensemble model is 0.14217564200604962\n",
            "Pearson correlation for subject 2 finger 3 using Ensemble model is 0.11494809766946978\n",
            "Pearson correlation for subject 2 finger 4 using Ensemble model is 0.20582732157064054\n",
            "Pearson correlation for subject 2 finger 5 using Ensemble model is 0.07881196069214533\n",
            "Pearson correlation for subject 3 finger 1 using Ensemble model is 0.3167010215167335\n",
            "Pearson correlation for subject 3 finger 2 using Ensemble model is 0.2031599881021387\n",
            "Pearson correlation for subject 3 finger 3 using Ensemble model is 0.25973594508755976\n",
            "Pearson correlation for subject 3 finger 4 using Ensemble model is 0.29660445679778524\n",
            "Pearson correlation for subject 3 finger 5 using Ensemble model is 0.2267879343184076\n"
          ]
        }
      ],
      "source": [
        "# Calculate pearson coefficients\n",
        "coeff_model = []\n",
        "for subj in range(len(val_dg)):\n",
        "  for finger in range(len(val_dg[0][0])):\n",
        "    coeff_model.append(pearsonr(val_dg[subj][:,finger],interpolated_Y[subj][:,finger]))\n",
        "    print(f'Pearson correlation for subject {subj+1} finger {finger+1} using Ensemble model is', np.mean(coeff_model[-1]))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the mean pearson coefficients (9features_Filter2_R_shuffle_ensemble_postprocessing) (0.4717 on leaderboard set)\n",
        "print('Mean Pearson correlation across subjects and fingers using Ensemble model is',np.mean(coeff_model))"
      ],
      "metadata": {
        "id": "Zvtmse_-s2dY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "818db316-ec79-40b6-fc86-b4e98b4ad248"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Pearson correlation across subjects and fingers using Ensemble model is 0.20767028978062854\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ga8GwI0d4MFF"
      },
      "source": [
        "# Prepare for Leaderboard Testing Set\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kbtQ5V1wjRUF"
      },
      "source": [
        "## Leaderboard Testing Dataset Preparation\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V2tH7Mqs9kLJ"
      },
      "outputs": [],
      "source": [
        "# Create feature matrix for the testing set on leaderboard\n",
        "leader1_features = get_windowed_feats(leaderboard_ecog[0,0], fs, length, displacement)\n",
        "leader2_features = get_windowed_feats(leaderboard_ecog[1,0], fs, length, displacement)\n",
        "leader3_features = get_windowed_feats(leaderboard_ecog[2,0], fs, length, displacement)\n",
        "\n",
        "leaderboard_features = [leader1_features, leader2_features, leader3_features]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create R matrix for testing features\n",
        "R_l1 = create_R_matrix(leader1_features, 3)\n",
        "R_l2 = create_R_matrix(leader2_features, 3)\n",
        "R_l3 = create_R_matrix(leader3_features, 3)\n",
        "R_leaderboard = [R_l1, R_l2, R_l3]"
      ],
      "metadata": {
        "id": "FHNjXylbzckh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define Interpolate Function\n",
        "def cubic_interp(predictions, desired_length):\n",
        "    interpolated = []\n",
        "\n",
        "    for filter in predictions:\n",
        "        original_time = np.arange(0, len(filter)) * winDisp\n",
        "\n",
        "        # Create a cubic spline interpolation object\n",
        "        cubic_spline = CubicSpline(original_time, filter)\n",
        "\n",
        "        new_time = np.linspace(0, original_time[-1], desired_length)\n",
        "\n",
        "        # Interpolate the filter coefficients at the new time points\n",
        "        interpolated.append(cubic_spline(new_time))\n",
        "\n",
        "    return interpolated"
      ],
      "metadata": {
        "id": "TA7xhwFaYKq9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Test on the testing dataset from leaderboard"
      ],
      "metadata": {
        "id": "w9jMA0DoYMEi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Test the training model using testing set from leaderboard and apply post-processing."
      ],
      "metadata": {
        "id": "iOijGmnFYchx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Testing and Post-processing\n",
        "Y_test, Y_post = [], []\n",
        "\n",
        "for i, features in tqdm(enumerate(R_leaderboard)):\n",
        "    Y_temp, Y_moving = [], []\n",
        "    for finger in range(len(all_ada_model[0])):\n",
        "        # Predict using the model\n",
        "        # Ensemble\n",
        "        xgb_pred = all_xgb_model[i][finger].predict(R_leaderboard[i])\n",
        "        ada_pred = all_ada_model[i][finger].predict(R_leaderboard[i])\n",
        "        Y_temp.append(np.mean([xgb_pred, ada_pred], axis=0))\n",
        "\n",
        "        # Apply moving average\n",
        "        Y_moving.append(moving_average(Y_temp[-1]))\n",
        "\n",
        "    # Store the predicted value and post processing in 3x5\n",
        "    Y_test.append(np.array(Y_temp).T)\n",
        "    Y_post.append(np.array(Y_moving).T)\n",
        "\n",
        "# Interpolate\n",
        "interpolated_Y = cubic_interp(Y_post,len(leaderboard_ecog[0,0]))"
      ],
      "metadata": {
        "id": "_fSf0xDrrNqy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cd5ac2bf-08a9-4f46-a8c1-fe1bdd41bf6f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "3it [00:14,  4.85s/it]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q3p9jP5OjdMW"
      },
      "source": [
        "## Prepare file for Uploading on Leaderboard\n",
        "Save the test result into a 3x1 matrix with shape (147500, 5) for each subject, and convert it to a `.mat` file."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h_i83vRa_0K0"
      },
      "outputs": [],
      "source": [
        "# Create submission array\n",
        "predictions = np.zeros((3,1), dtype=object)\n",
        "predictions[0,0] = interpolated_Y[0]\n",
        "predictions[1,0] = interpolated_Y[1]\n",
        "predictions[2,0] = interpolated_Y[2]\n",
        "\n",
        "# Save the array using the right format\n",
        "savemat('predictions.mat', {'predicted_dg':predictions})"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "v1ZfISDvuuzI"
      ]
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
